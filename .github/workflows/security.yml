name: Security

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Mondays
  workflow_dispatch:

jobs:
  # Check if we should skip security scans for documentation-only changes
  check-changes:
    name: Check Changes
    runs-on: ubuntu-latest
    outputs:
      skip_security: ${{ steps.check.outputs.skip_security }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check changed files
      id: check
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || [[ "${{ github.event_name }}" == "schedule" ]]; then
          echo "skip_security=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        if [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "skip_security=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # For PRs, check what files changed
        CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
        echo "Changed files: $CHANGED_FILES"

        # Check if only documentation files changed
        if echo "$CHANGED_FILES" | grep -vE '\.(md|txt|rst|pdf)$|^docs/|^\.github/workflows/(claude|claude-code-review|release-please)\.yml$' | grep -q .; then
          echo "skip_security=false" >> $GITHUB_OUTPUT
        else
          echo "skip_security=true" >> $GITHUB_OUTPUT
          echo "Only documentation files changed, skipping security scans"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.skip_security == 'false'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install checkov
      run: pip install checkov

    - name: Install tfsec securely with checksum verification
      run: |
        # Use official GitHub Action for secure installation
        # This avoids supply chain attacks by using verified action
        echo "Using tfsec GitHub Action for security"

    - name: Create .checkov.yml configuration
      run: |
        cat > .checkov.yml << 'EOF'
        framework:
          - terraform
        download-external-modules: true
        evaluate-variables: true
        skip-check:
          # ECR Public repositories are inherently public - skip private checks
          - CKV_AWS_136  # ECR repository is not encrypted
          - CKV_AWS_51   # ECR repository has image scanning disabled
          # Skip checks not applicable to ECR Public
          - CKV_AWS_163  # ECR repository policy is not set
        EOF

    - name: Create custom tfsec checks for ECR Public
      run: |
        mkdir -p .tfsec-custom
        cat > .tfsec-custom/ecr-public-checks.yaml << 'EOF'
        checks:
          - code: ECR-PUB-001
            description: ECR Public repositories should have appropriate catalog data
            impact: Low
            resolution: Configure catalog_data block with description, about_text, and usage_text
            requiredTypes:
              - resource
        EOF

    - name: Run checkov on main module
      run: |
        checkov --config-file .checkov.yml --output cli --output sarif --output-file-path console,checkov-results.sarif
      continue-on-error: true

    - name: Run tfsec on main module
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        format: sarif
        soft_fail: true
        additional_args: --exclude-path test/ --custom-check-dir .tfsec-custom
        sarif_file: tfsec-results.sarif

    - name: ECR Public Specific Security Checks
      run: |
        echo "Running ECR Public specific security checks..."

        # Check for sensitive information in catalog data
        echo "Checking for potential sensitive information in catalog data..."
        if grep -ri "password\|secret\|token\|key\|credential" examples/ --include="*.tf"; then
          echo "⚠️ Warning: Potential sensitive information found in catalog data"
          echo "Remember that ECR Public catalog data is publicly visible"
        fi

        # Check repository naming conventions with robust parsing
        echo "Checking repository naming conventions..."
        python3 << 'EOF'
        import re
        import os
        import sys
        from pathlib import Path

        # Find all repository names in Terraform files
        repo_names = []
        for tf_file in Path('.').rglob('*.tf'):
            if '.terraform' in str(tf_file):
                continue
            try:
                content = tf_file.read_text()
                # Use proper regex to extract repository names
                names = re.findall(r'repository_name\s*=\s*"([^"]+)"', content)
                repo_names.extend(names)
            except Exception as e:
                print(f"Error reading {tf_file}: {e}")

        # Check naming conventions
        for name in repo_names:
            if re.search(r'[A-Z]', name):
                print(f"⚠️ Warning: Repository name '{name}' contains uppercase letters")
                print("ECR Public repository names should be lowercase for consistency")

            if len(name) > 256:
                print(f"❌ Error: Repository name '{name}' exceeds 256 character limit")
                sys.exit(1)

        print(f"Checked {len(repo_names)} repository names")
        EOF

        # Check for public content appropriateness
        echo "Checking catalog data for public repository appropriateness..."
        if grep -ri "internal\|private\|confidential\|restricted" examples/ --include="*.tf"; then
          echo "⚠️ Warning: Found terms suggesting internal use in public repository content"
          echo "Review catalog data to ensure it's appropriate for public visibility"
        fi

        echo "ECR Public security checks completed"

    - name: Upload checkov results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('checkov-results.sarif') != ''
      with:
        sarif_file: checkov-results.sarif
        category: checkov

    - name: Upload tfsec results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('tfsec-results.sarif') != ''
      with:
        sarif_file: tfsec-results.sarif
        category: tfsec

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Run Go vulnerability scan
      run: |
        cd test
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
      continue-on-error: true

    - name: Run Go module security audit
      run: |
        cd test
        go mod verify
        go list -m all | grep -v "^$(go list -m)$" | sort | uniq > deps.txt
        echo "Checking dependencies for known vulnerabilities..."
        cat deps.txt
      continue-on-error: true

  security-scan-examples:
    name: Security Scan Examples
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.skip_security == 'false'
    strategy:
      matrix:
        example: ['using_objects', 'using_variables']

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install checkov
      run: pip install checkov

    - name: Run checkov on example
      run: |
        if [ -d "examples/${{ matrix.example }}" ]; then
          checkov -d examples/${{ matrix.example }} --framework terraform --output cli \
          --skip-check CKV_AWS_136,CKV_AWS_51,CKV_AWS_163
        fi
      continue-on-error: true

    - name: Run tfsec on example
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: examples/${{ matrix.example }}
        format: sarif
        soft_fail: true
        sarif_file: tfsec-example-results.sarif

    - name: ECR Public Example Security Analysis
      run: |
        cd examples/${{ matrix.example }}
        echo "Analyzing example ${{ matrix.example }} for ECR Public security considerations..."

        # Check for hardcoded repository names that might conflict
        if grep -q "lgallard-public-repo" *.tf; then
          echo "⚠️ Warning: Found hardcoded repository name 'lgallard-public-repo'"
          echo "Consider using variables for repository names in production"
        fi

        # Check catalog data content for potential issues
        if grep -qi "test\|example\|demo" *.tf; then
          echo "ℹ️ Info: Example contains test/demo content (expected for examples)"
        fi

        # Verify us-east-1 region usage
        if grep -r "region" *.tf | grep -v "us-east-1"; then
          echo "❌ Error: ECR Public repositories must be created in us-east-1 region"
          exit 1
        fi

        echo "Example ${{ matrix.example }} security analysis completed"

  public-content-audit:
    name: Public Content Audit
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.skip_security == 'false'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install content analysis dependencies
      run: |
        pip install markdown beautifulsoup4

    - name: Audit Public Content
      run: |
        python3 << 'EOF'
        import re
        import os
        import sys
        from pathlib import Path

        def check_catalog_data_files():
            """Check catalog data content for public appropriateness"""
            issues = []
            warnings = []

            # Patterns that might indicate internal/private content
            sensitive_patterns = [
                r'\b(internal|private|confidential|restricted|secret)\b',
                r'\b(password|token|key|credential)\b',
                r'\b(staging|dev|development|test-internal)\b',
                r'\b(10\.\d+\.\d+\.\d+|192\.168\.\d+\.\d+|172\.(1[6-9]|2\d|3[01])\.\d+\.\d+)\b',  # Private IPs
                r'\b[a-zA-Z0-9._%+-]+@(?!example\.com|test\.com)[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b'  # Real emails
            ]

            # Check all Terraform files for catalog data
            for tf_file in Path('.').rglob('*.tf'):
                if '.terraform' in str(tf_file):
                    continue

                try:
                    content = tf_file.read_text()

                    # Extract catalog data content
                    catalog_blocks = re.findall(r'catalog_data\s*[=\{].*?[\}]', content, re.DOTALL)

                    for block in catalog_blocks:
                        for pattern in sensitive_patterns:
                            matches = re.findall(pattern, block, re.IGNORECASE)
                            if matches:
                                warnings.append(f"File {tf_file}: Found potentially sensitive content: {matches}")

                    # Check for appropriate markdown formatting
                    if 'about_text' in content or 'usage_text' in content:
                        if '# ' not in content and '## ' not in content:
                            warnings.append(f"File {tf_file}: Consider using markdown headers in catalog text")

                except Exception as e:
                    issues.append(f"Error reading {tf_file}: {e}")

            return issues, warnings

        def check_repository_names():
            """Check repository naming conventions"""
            issues = []

            # Find all repository names
            for tf_file in Path('.').rglob('*.tf'):
                if '.terraform' in str(tf_file):
                    continue

                try:
                    content = tf_file.read_text()

                    # Find repository_name assignments
                    repo_names = re.findall(r'repository_name\s*=\s*"([^"]+)"', content)

                    for name in repo_names:
                        # Check naming conventions
                        if not re.match(r'^[a-z0-9][a-z0-9-_]*$', name):
                            issues.append(f"Repository name '{name}' in {tf_file} doesn't follow lowercase convention")

                        if len(name) > 256:
                            issues.append(f"Repository name '{name}' in {tf_file} exceeds 256 character limit")

                        if name.endswith('-') or name.endswith('_'):
                            issues.append(f"Repository name '{name}' in {tf_file} ends with special character")

                except Exception as e:
                    issues.append(f"Error reading {tf_file}: {e}")

            return issues

        # Run audits
        content_issues, content_warnings = check_catalog_data_files()
        naming_issues = check_repository_names()

        # Report results
        if content_issues or naming_issues:
            print("❌ Public Content Audit found issues:")
            for issue in content_issues + naming_issues:
                print(f"  - {issue}")
            sys.exit(1)

        if content_warnings:
            print("⚠️ Public Content Audit warnings:")
            for warning in content_warnings:
                print(f"  - {warning}")

        print("✅ Public Content Audit completed successfully")
        EOF

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [check-changes, security-scan, security-scan-examples, public-content-audit]
    if: always() && needs.check-changes.outputs.skip_security == 'false'

    steps:
    - name: Security Results
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Main Module Security | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Examples Security | ${{ needs.security-scan-examples.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Public Content Audit | ${{ needs.public-content-audit.result }} |" >> $GITHUB_STEP_SUMMARY

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ECR Public Security Considerations" >> $GITHUB_STEP_SUMMARY
        echo "- Repository content is **publicly visible** in ECR Public Gallery" >> $GITHUB_STEP_SUMMARY
        echo "- Catalog data (description, about_text, usage_text) is **public**" >> $GITHUB_STEP_SUMMARY
        echo "- Repository names should follow lowercase conventions" >> $GITHUB_STEP_SUMMARY
        echo "- All repositories must be created in **us-east-1** region" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.security-scan.result }}" != "success" || "${{ needs.security-scan-examples.result }}" != "success" || "${{ needs.public-content-audit.result }}" != "success" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ Some security checks failed. Please review the logs and address issues before merging." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All security checks passed successfully!" >> $GITHUB_STEP_SUMMARY
        fi

  skip-notification:
    name: Skip Notification
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.skip_security == 'true'

    steps:
    - name: Skip Security Notification
      run: |
        echo "## Security Scans Skipped" >> $GITHUB_STEP_SUMMARY
        echo "Only documentation files were changed, skipping security scans." >> $GITHUB_STEP_SUMMARY
